"use strict";(self.webpackChunkdigital_enabler_documentation=self.webpackChunkdigital_enabler_documentation||[]).push([[489],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=u(a),d=r,g=h["".concat(s,".").concat(d)]||h[d]||c[d]||i;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1573:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const i={},o="Flow Guide",l={unversionedId:"data-mashup/flowGuide/flowGuide",id:"data-mashup/flowGuide/flowGuide",title:"Flow Guide",description:"A flow is composed of three main elements: a trigger, a mashup, and targets.",source:"@site/docs/data-mashup/flowGuide/flowGuide.md",sourceDirName:"data-mashup/flowGuide",slug:"/data-mashup/flowGuide/",permalink:"/data-mashup/flowGuide/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebars",previous:{title:"Datasources guide",permalink:"/data-mashup/dataSourceGuide/dataSourceGuide"},next:{title:"Workflow management",permalink:"/workflow-management/workflow-management"}},s={},u=[{value:"Trigger",id:"trigger",level:2},{value:"Data Bind",id:"data-bind",level:2},{value:"Authorization",id:"authorization",level:2},{value:"Mashup",id:"mashup",level:2},{value:"Targets",id:"targets",level:2},{value:"Authorization",id:"authorization-1",level:2}],p={toc:u},h="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(h,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flow-guide"},"Flow Guide"),(0,r.kt)("p",null,"A flow is composed of three main elements: a trigger, a mashup, and targets.\nStart creating a Mashup Editor"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(3312).Z,width:"1140",height:"475"})),(0,r.kt)("p",null,"Choose a name and a Mashup for your flow."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(4986).Z,width:"529",height:"331"})),(0,r.kt)("h2",{id:"trigger"},"Trigger"),(0,r.kt)("p",null,"The trigger is defined as the signal that initiates the execution of the mashup. There are several types of triggers available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HTTP"),": This trigger allows users to invoke the mashup through a simple POST type HTTP request. The endpoint for accessing the mashup can be found at the bottom of the modal.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(4332).Z,width:"727",height:"458"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Kafka"),": This trigger enables the mashup to be started by sending a message to a selected topic in Kafka. It requires configuration with the bootstrap host, port parameters, Kafka group, and topic.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(6719).Z,width:"726",height:"590"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MQTT"),": This trigger allows the mashup to be started by sending a message to a selected topic in MQTT. It requires configuration with the host, port, and topic.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(9967).Z,width:"718",height:"477"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scheduled"),": This trigger utilizes a time-scheduler to start the mashup at specified intervals.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(4226).Z,width:"721",height:"424"})),(0,r.kt)("h2",{id:"data-bind"},"Data Bind"),(0,r.kt)("p",null,"When using HTTP, Kafka, or MQTT as triggers for the mashup, configuring the data bind is essential. The data bind configuration enables the input of the mashup to be connected with the complete data or a part of it sent through the trigger. For example, if you send a Kafka message to the topic that triggers the mashup and you need to use its data as input, you must declare the corresponding pair input JSON path in the modal. The trash bin icon on the right side of the modal allows you to delete created pairs. Note that any unbound pairs will not be saved in the trigger."),(0,r.kt)("p",null,"JSON path example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "John",\n    "age": 30\n}\n')),(0,r.kt)("p",null,"Then the JSON path for the name field will be ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and the JSON path for the age field will be ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),"."),(0,r.kt)("h2",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"The access policy determines who can execute the project through DME (Data Mashup Engine). There are three options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"PUBLIC"),": Everyone can execute the project.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(6886).Z,width:"718",height:"368"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"API-KEY"),":")),(0,r.kt)("p",null,"When the access policy is set to API-KEY, an API-Key field is displayed. It can be regenerated or copied to the clipboard. This API-Key is required for executing the project when the access policy is set to API-KEY. Only those who have the API-Key can execute the project through DME."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(2213).Z,width:"738",height:"455"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OAUTH2"),":")),(0,r.kt)("p",null,"When the access policy is set to OAUTH2, the user must provide the OpenID Discovery URL: this URL is used to retrieve the OAuth2 configuration. The OAuth2 configuration is used to retrieve the access token. The access token is used to execute the project through DME."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(5570).Z,width:"734",height:"443"})),(0,r.kt)("h2",{id:"mashup"},"Mashup"),(0,r.kt)("p",null,"This is the field where you can select which version of the mashup you want to execute in your flow."),(0,r.kt)("h2",{id:"targets"},"Targets"),(0,r.kt)("p",null,"Targets are the entities where the output of our mashup will be sent. There are different types of targets available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"HTTP"),": This target can be configured with a name, endpoint, HTTP method, and header parameters. Available HTTP methods are POST, PUT, and PATCH.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Kafka"),": This target can be configured with a name, bootstrap server information (HOST and PORT), and topic.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"MQTT"),": This target can be configured with a name, HOST, PORT, Fiware service, and Fiware service path.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ORION"),": Specify the Orion target configuration.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fhir"),": This target can be configured with a name and a Fhir server base URL."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20230612163527646",src:a(2841).Z,width:"670",height:"560"})),(0,r.kt)("p",null,"##Execution rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Always"),": The mashup will be always executed.")),(0,r.kt)("h2",{id:"authorization-1"},"Authorization"),(0,r.kt)("p",null,"Currently, the mashup editor supports two types of authentication: Basic and OAuth 2.0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Basic Auth"),": It can be configured with just a username and password.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"OAuth 2.0"),": It requires an Access Token URL, Client ID, and Client Secret configuration."))),(0,r.kt)("p",null,"Please refer to the documentation for a detailed guide on setting up and configuring the filter elements in your flow."))}c.isMDXComponent=!0},3312:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow1-518056b79fcb92b76d001d586719fcb6.png"},2841:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow10-f8ecf2329376ac9385e6e81feb1a9734.png"},4986:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow2-e0470bda22f25299955ce7d72a351d8e.png"},4332:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow3-d44901336b1a160c585a4f8e85ea42ba.png"},6719:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow4-96523a38e0fe911715445d41b9418697.png"},9967:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow5-97e37e0516bd99a06af43c05b40db21b.png"},4226:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow6-0f6508de50cfcbed488353dcea1fbd0f.png"},6886:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow7-3ba7eb4ab70a4024395362ad00cded55.png"},2213:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow8-f2ff8bf1d8f40c066dd6313263f05564.png"},5570:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/createFlow9-a9b2a04825fd7314112b2b6c7e56ec15.png"}}]);